#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.10"
# dependencies = [
#   "matplotlib",
# ]
# ///

import os
import subprocess
import datetime
from collections import defaultdict
import re
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import argparse

def get_line_ages(file_path, root_path):
    """
    Uses 'git blame --porcelain' to get the commit hash and date for each line
    in a file. It returns a list of datetimes for each line.
    """
    try:
        cmd = ['git', 'blame', '--porcelain', file_path]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, cwd=root_path)
        blame_output = result.stdout.strip().split('\n')
        
        line_dates = []
        commit_dates = {}
        
        # Regex to find commit hash and author-time
        commit_pattern = re.compile(r'^([a-f0-9]{40}).*')
        time_pattern = re.compile(r'^author-time (\d+)')
        
        for line in blame_output:
            commit_match = commit_pattern.match(line)
            if commit_match:
                current_commit = commit_match.group(1)
            
            time_match = time_pattern.match(line)
            if time_match:
                timestamp = int(time_match.group(1))
                commit_dates[current_commit] = datetime.datetime.fromtimestamp(timestamp).date()
            
            # If the line starts with a tab, it's the actual line of code,
            # so we've finished processing the blame metadata for that line.
            if line.startswith('\t'):
                line_dates.append(commit_dates[current_commit])
                
        return line_dates
    except subprocess.CalledProcessError as e:
        print(f"Error blaming file {file_path}: {e}")
        return []

def calculate_average_age_and_loc(root_path, subdirectory=None):
    """
    Walks through the git-tracked files, calculates the average age and
    total lines of code for each directory.
    """
    today = datetime.date.today()
    directory_data = defaultdict(lambda: {'total_age': 0, 'loc': 0})
    
    # Get a list of all files tracked by git, optionally filtered by a subdirectory
    git_files_cmd = ['git', 'ls-files']
    if subdirectory:
        git_files_cmd.append(subdirectory)
        
    try:
        git_files_result = subprocess.run(git_files_cmd, capture_output=True, text=True, check=True, cwd=root_path)
        all_files = git_files_result.stdout.strip().split('\n')
    except subprocess.CalledProcessError as e:
        print(f"Error listing files in git repo: {e}")
        return {}
    
    for file_path in all_files:
        if not file_path:
            continue
        
        full_path = os.path.join(root_path, file_path)
        if not os.path.exists(full_path) or not os.path.isfile(full_path):
            continue
        
        # `git blame` is slow, so we only run it on files that likely contain code
        # You can expand this list as needed.
        if os.path.splitext(file_path)[1] in ['.py', '.js', '.ts', '.html', '.css', '.c', '.cpp', '.java']:
            line_dates = get_line_ages(file_path, root_path)
            
            if line_dates:
                directory = os.path.dirname(file_path)
                directory_data[directory]['loc'] += len(line_dates)
                for date in line_dates:
                    age_in_days = (today - date).days
                    directory_data[directory]['total_age'] += age_in_days

    for directory in directory_data:
        if directory_data[directory]['loc'] > 0:
            average_age = directory_data[directory]['total_age'] / directory_data[directory]['loc']
            directory_data[directory]['average_age'] = average_age
        else:
            directory_data[directory]['average_age'] = 0
            
    return directory_data

def visualize_graphical_heatmap(directory_data):
    """
    Uses matplotlib to create a bar chart where bar height is LOC and
    bar color represents the average age of the code.
    """
    if not directory_data:
        print("No data to visualize.")
        return
        
    # Prepare data for plotting
    directories = []
    lines_of_code = []
    average_ages = []
    
    # Sort by directory name for consistent output
    sorted_directories = sorted(directory_data.keys())

    for directory in sorted_directories:
        data = directory_data[directory]
        if data['loc'] > 0:
            directories.append(directory if directory else 'root')
            lines_of_code.append(data['loc'])
            average_ages.append(data['average_age'])
            
    if not directories:
        print("No valid data to plot.")
        return

    # Create a continuous colormap (e.g., green to red)
    cmap = plt.get_cmap('RdYlGn_r')
    normalize = mcolors.Normalize(vmin=min(average_ages), vmax=max(average_ages))
    colors = [cmap(normalize(age)) for age in average_ages]
    
    # Create the plot
    fig, ax = plt.subplots(figsize=(12, 8))
    bars = ax.bar(directories, lines_of_code, color=colors)
    
    ax.set_xlabel('Directory', fontsize=12)
    ax.set_ylabel('Lines of Code (LOC)', fontsize=12)
    ax.set_title('Code Age and Lines of Code Heatmap', fontsize=14)
    
    # Rotate x-axis labels for better readability
    plt.xticks(rotation=45, ha='right')
    
    # Create a color bar legend
    sm = plt.cm.ScalarMappable(cmap=cmap, norm=normalize)
    sm.set_array([])
    cbar = plt.colorbar(sm, ax=ax)
    cbar.set_label('Average Code Age (Days)', fontsize=12)
    
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Visualize code age and lines of code in a Git repository.')
    parser.add_argument('subdirectory', nargs='?', help='The subdirectory to analyze. If not provided, the entire repository is analyzed.')
    args = parser.parse_args()

    current_repo_path = os.getcwd()
    
    if args.subdirectory and not os.path.isdir(os.path.join(current_repo_path, args.subdirectory)):
        print(f"Error: Subdirectory '{args.subdirectory}' does not exist.")
    else:
        print(f"Analyzing Git repository at: {current_repo_path}")
        if args.subdirectory:
            print(f"Filtering analysis to subdirectory: {args.subdirectory}")
        print("This may take some time on large repositories...")
        
        data = calculate_average_age_and_loc(current_repo_path, args.subdirectory)
        if data:
            visualize_graphical_heatmap(data)
        else:
            print("No files found or unable to analyze the repository.")


